//
//  EVLHTTPClient.h
//  LapseKit
//
//  Created by Caleb Davenport on 7/9/13.
//  Copyright (c) 2013 Seesaw. All rights reserved.
//

#import <AFNetworking/AFNetworking.h>

#import "EVLUserRelationshipType.h"

typedef void (^EVLHTTPClientSuccess)(AFHTTPRequestOperation *operation, id responseObject);
typedef void (^EVLHTTPClientFailure)(AFHTTPRequestOperation *operation, NSError *error);

@interface EVLHTTPClient : AFHTTPClient

#pragma mark - Shared client

/**
 Access the shared HTTP client.
 @return The shared HTTP client.
 */
+ (instancetype)sharedClient;

/**
 Stop all network operations and destroy the shared HTTP client.
 */
+ (void)resetSharedClient;

#pragma mark - Error handling

/**
 Called whenever the HTTP client encounters a 401. Subclasses should override
 this to provide any custom behavior in this case. The default implementation
 of this method is empty.
 @param error The error generated by AFNetworking.
 @param operation The operation that failed.
 */
- (void)handleUnauthorizedError:(NSError *)error operation:(AFHTTPRequestOperation *)operation;

#pragma mark - Users

/**
 Get the user with the given ID.
 @param userID The ID of the user you would like to get.
 */
- (void)getUserWithID:(NSUInteger)userID success:(EVLHTTPClientSuccess)success failure:(EVLHTTPClientFailure)failure;

/**
 Get followers and following lists for the given user. This method supports
 pagination across a user list using the `limit` and `page` parameters.
 Additionally, the response headers will contain `X-Everlapse-Page-Count` which
 you can use to determine how many pages of content there are.
 @param userID The user ID who's friends you would like to list.
 @param page The page you would like to fetch. Pass `0` here to start at the
 most recent friend.
 @param limit Scope the response to no more than this many users. Pass `0` here
 to let the API decide how many users should be returned.
 */
- (void)getRelationship:(EVLUserRelationshipType)relationship forUserWithID:(NSUInteger)userID page:(NSUInteger)page limit:(NSUInteger)limit success:(EVLHTTPClientSuccess)success failure:(EVLHTTPClientFailure)failure;

- (void)getRelationship:(EVLUserRelationshipType)relationship forUserWithID:(NSUInteger)userID success:(EVLHTTPClientSuccess)success failure:(EVLHTTPClientFailure)failure;
- (void)getRelationship:(EVLUserRelationshipType)relationship forUserWithID:(NSUInteger)userID page:(NSUInteger)page success:(EVLHTTPClientSuccess)success failure:(EVLHTTPClientFailure)failure;

#pragma mark - Clips

/**
 Get the clip with the given ID.
 @param clipID The ID of the clip you would like to get.
 */
- (void)getClipWithID:(NSUInteger)clipID success:(EVLHTTPClientSuccess)success failure:(EVLHTTPClientFailure)failure;

/**
 Get the clip with the given slug.
 @param slug The slug of the clip you would like to get. This should include
 the "c/" URL component.
 */
- (void)getClipWithSlug:(NSString *)slug success:(EVLHTTPClientSuccess)success failure:(EVLHTTPClientFailure)failure;

#pragma mark - Timelines

/**
 Get clips in the given timeline. The method supports pagination across a
 timeline using the `limit` and `clipID` parameters.
 @param timelineName The name of the timeline to fetch.
 @param clipID Get clips that appear in the given timeline before this clip.
 Pass `0` here to start at the most recent clip.
 @param limit Scope the response to no more than this many clips. Pass `0` here
 to let the API decide how many clips should be returned.
 */
- (void)getClipsInTimelineWithName:(NSString *)timelineName beforeClipWithID:(NSUInteger)clipID limit:(NSUInteger)limit success:(EVLHTTPClientSuccess)success failure:(EVLHTTPClientFailure)failure;

- (void)getClipsInTimelineWithName:(NSString *)timelineName success:(EVLHTTPClientSuccess)success failure:(EVLHTTPClientFailure)failure;
- (void)getClipsInTimelineWithName:(NSString *)timelineName limit:(NSUInteger)limit success:(EVLHTTPClientSuccess)success failure:(EVLHTTPClientFailure)failure;

@end
